#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""A key management client: just sends the key to the server.

See the official `documentation`_ if need be.

.. _documentation: https://docs.python.org/3/library/asyncio.html
"""

import argparse
import asyncio
import ssl


class KeyTalkerProtocol(asyncio.Protocol):
    """The main echo key protocol."""

    def __init__(self, message, on_con_lost):
        self.message = message
        self.on_con_lost = on_con_lost

    def connection_made(self, transport):
        """Called when a connection is made.

        The transport argument is the transport representing the
        connection. The protocol is responsible for storing the
        reference to its transport.
        """
        transport.write(self.message.encode())
        print("Data sent: {!r}.".format(self.message))

    def data_received(self, data):
        """Called when some data is received. data is a non-empty bytes object
        containing the incoming data.

        Whether the data is buffered, chunked or reassembled depends on the
        transport. In general, you shouldnâ€™t rely on specific semantics and
        instead make your parsing generic and flexible. However, data is
        always received in the correct order.

        The method can be called an arbitrary number of times while a
        connection is open.

        However, protocol.eof_received() is called at most once. Once
        eof_received() is called, data_received() is not called anymore.
        """
        print("Data received: {!r}.".format(data.decode()))

    def connection_lost(self, exc):
        """Called when the connection is lost or closed.

        The argument is either an exception object or None. The latter
        means a regular EOF is received, or the connection was aborted
        or closed by this side of the connection.
        """
        if exc is not None:
            print("Error, closed the connection because {}", exc)
        else:
            print("The server closed the connection.")
        self.on_con_lost.set_result(True)


async def main():
    """Does the hard work so you do not have to."""

    # Get a reference to the event loop as we plan to use low-level APIs.
    loop = asyncio.get_running_loop()

    # Make sure we can exit this.
    on_con_lost = loop.create_future()

    # SSL.
    sc = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    sc.check_hostname = False  # FIXME

    # Start the client.
    transport, _ = await loop.create_connection(
        lambda: KeyTalkerProtocol(message, on_con_lost),
        host,
        port,
        ssl=sc,
    )

    # Wait until the protocol signals that the connection is lost and close
    # the transport.
    try:
        await on_con_lost
    finally:
        transport.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--host', default="localhost",
                        help="Host the key listener is running on")
    parser.add_argument('--port', default=8888,
                        help="Port the key listener is running on")
    parser.add_argument('--key', default=8888, required=True,
                        help="The key to be sent to the listener")
    args = parser.parse_args()
    arg_dict = vars(args)
    host = arg_dict['host']
    port = arg_dict['port']
    message = arg_dict['key']
    asyncio.run(main())
